import requests

from django.urls import reverse


# def func(x):
#     return x + 1
#
#
# def test_answer():
#     '''
#     Использование префикса "test_" в именах функций тестирования имеет следующие преимущества:
#     Ясность: Префикс делает очевидным, что функция представляет собой тест.
#     Если вы видите функцию с именем, начинающимся с "test_", это сигнализирует о том, что это тест.
#     Автоматизация: Некоторые инструменты для запуска тестов
#     (например, модуль unittest в стандартной библиотеке Python) автоматически обнаруживают и запускают тесты,
#     основываясь на соглашениях именования. Если вы используете префикс "test_",
#     то эти инструменты могут легко определить, какие функции следует рассматривать как тесты.
#     :return:
#     '''
#     assert func(3) == 5
#

def test_index(client):
    responce = client.get('/')
    assert responce.status_code == 200


def test_get_rate_list(client):
    response = client.get('/rate/list/', follow=True)
    # В Django, при отправке HTTP-запросов с использованием библиотеки requests или аналогичных,
    # параметр follow принимает булево значение и указывает, следует ли следовать перенаправлениям (редиректам)
    # автоматически.
    # Если follow установлен в True, библиотека requests автоматически следует по всем перенаправлениям,
    # пока не достигнет конечной точки (например, успешного ответа или ошибки).
    # Это полезно в ситуациях, когда веб-сервер выполняет перенаправление, например, после успешной аутентификации.
    assert response.status_code == 200


# def test_post_contact_us_empty_form(client):
#     response = client.post(reverse('message-create'))
#     assert response.status_code == 200



